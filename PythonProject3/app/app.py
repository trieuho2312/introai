import streamlit as st
from recommender.recommend import SongRecommender
from recommender.emotion_model import EmotionClassifier
from recommender.spotify_api import search_track
from recommender.genius_api import get_lyrics

st.set_page_config(page_title="üéµ Music Recommender", layout="wide")

st.title("üéµ Music Recommender System")
st.markdown("---")

option = st.radio("üéØ Ch·ªçn ch·ª©c nƒÉng:", (
    "G·ª£i √Ω b√†i h√°t t∆∞∆°ng t·ª±",
    "T√¨m b√†i h√°t theo l·ªùi nh·∫≠p t·ª± do"
), horizontal=False)

recommender = SongRecommender()
clf = EmotionClassifier()

if option == "G·ª£i √Ω b√†i h√°t t∆∞∆°ng t·ª±":
    song_name = st.text_input("üéØ Nh·∫≠p t√™n b√†i h√°t b·∫°n ƒëang nghe ho·∫∑c mu·ªën g·ª£i √Ω:")
    if song_name:
        df = recommender.df
        matched = df[df['song'].str.lower() == song_name.lower()]
        results = None

        if not matched.empty:
            st.success("‚úÖ B√†i h√°t c√≥ trong h·ªá th·ªëng. G·ª£i √Ω b√†i t∆∞∆°ng t·ª±:")
            results = recommender.recommend(song_name)
        else:
            st.warning("üîç B√†i h√°t kh√¥ng c√≥ s·∫µn trong h·ªá th·ªëng. ƒêang t√¨m lyrics...")
            sp_result = search_track(song_name)
            if sp_result:
                st.markdown(f"**üé∂ ƒê√£ t√¨m th·∫•y:** `{sp_result['song']}` - *{sp_result['artist']}*")
                st.image(sp_result['image'], width=300)
                st.markdown(f"[üîó M·ªü Spotify]({sp_result['url']})", unsafe_allow_html=True)

                lyrics = get_lyrics(sp_result['song'], sp_result['artist'])
                if lyrics:
                    emotion = clf.predict(lyrics)
                    st.markdown(f"üîÆ D·ª± ƒëo√°n c·∫£m x√∫c b√†i h√°t: **{emotion.upper()}**")
                    results = recommender.recommend_from_lyrics(lyrics, target_emotion=emotion)
                else:
                    st.error("‚ùå Kh√¥ng t√¨m th·∫•y lyrics ƒë·ªÉ ph√¢n t√≠ch.")
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t tr√™n Spotify.")

        if results is not None:
            if not matched.empty:
                top_emotion = results["emotion"].value_counts().idxmax()
                st.markdown(f"üîÆ C·∫£m x√∫c ƒëa s·ªë trong c√°c b√†i t∆∞∆°ng t·ª±: **{top_emotion.upper()}**")

            st.markdown("### üéß G·ª£i √Ω c√°c b√†i h√°t t∆∞∆°ng t·ª±:")
            for i, row in results.iterrows():
                col1, col2 = st.columns([1, 5])
                with col1:
                    sp = search_track(f"{row['song']} {row['artist']}")
                    if sp and sp['image']:
                        st.image(sp['image'], width=100)
                with col2:
                    st.markdown(f"**{row['song']}***{row['artist']}*Emotion: {row['emotion']}")
                    if sp and sp['url']:
                        st.markdown(f"[M·ªü tr√™n Spotify]({sp['url']})", unsafe_allow_html=True)

elif option == "T√¨m b√†i h√°t theo l·ªùi nh·∫≠p t·ª± do":
    user_input = st.text_input("‚úçÔ∏è Nh·∫≠p m·ªôt c√¢u m√¥ t·∫£ c·∫£m x√∫c, suy nghƒ© ho·∫∑c l·ªùi b√†i h√°t:")
    if user_input:
        predicted_emotion = clf.predict(user_input)
        st.success(f"üí° D·ª± ƒëo√°n c·∫£m x√∫c: **{predicted_emotion.upper()}**")

        df = recommender.df
        filtered = df[df["emotion"].str.lower() == predicted_emotion.lower()]
        if not filtered.empty:
            st.markdown("### üéß C√°c b√†i h√°t ph√π h·ª£p v·ªõi c·∫£m x√∫c c·ªßa b·∫°n:")
            for i, row in filtered.sample(5).iterrows():
                col1, col2 = st.columns([1, 5])
                with col1:
                    sp = search_track(f"{row['song']} {row['artist']}")
                    if sp and sp['image']:
                        st.image(sp['image'], width=100)
                with col2:
                    st.markdown(f"**{row['song']}***{row['artist']}*Emotion: {row['emotion']}")
                    if sp and sp['url']:
                        st.markdown(f"[M·ªü tr√™n Spotify]({sp['url']})", unsafe_allow_html=True)
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p v·ªõi c·∫£m x√∫c n√†y.")
